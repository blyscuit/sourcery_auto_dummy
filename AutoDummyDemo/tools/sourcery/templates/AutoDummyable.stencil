{% for import in argument.testableImports %}
@testable import {{ import }}
{% endfor %}
{% for import in argument.imports %}
import {{ import }}
{% endfor %}

{% macro compareVariables variables %}
        {% for variable in variables where variable.readAccess != "private" and variable.readAccess != "fileprivate" %}
        {% if variable.typeName.unwrappedTypeName == "String" %}{{ variable.name }}: "{{ variable.name }}"{% if not forloop.last%}, {% endif %}
        {% elif variable.typeName.unwrappedTypeName == "Int" %}{{ variable.name }}: 1{% if not forloop.last%}, {% endif %}
        {% else %}{{ variable.name }}: .dummy{% if not forloop.last%}, {% endif %}
        {% endif %}
        {% endfor %}
{% endmacro %}

// MARK: - autoDummyable for classes, protocols, structs
{% for type in types.types|!enum where type.implements.AutoDummyable or type|annotated:"AutoDummyable" %}
{% if type.supertype.based.Equatable or type.supertype.implements.AutoDummyable or type.supertype|annotated:"AutoDummyable" %}THIS WONT COMPILE, WE DONT SUPPORT INHERITANCE for AutoDummyable{% endif %}
extension {{ type.name }} {
    static let dummy = {{ type.name }}(
        {% call compareVariables type.storedVariables %}
    )
}
{% endfor %}
